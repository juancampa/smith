"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProgramInstances = getProgramInstances;
exports.measure = measure;
exports.normalizeRef = normalizeRef;
var _ayvaCommon = require("@ayva/ayva-common");
async function measure(tag, promise) {
  console.time(`[ ${tag} ]`);
  let result = await promise;
  console.timeEnd(`[ ${tag} ]`);
  return result;
}
let _instances;
function loadInstances(userId) {
  if (_instances === undefined) {
    _instances = _ayvaCommon.dbService.run(_ayvaCommon.dbService.programInstance.filter({
      userId,
      status: 'running'
    }).eqJoin(x => x('programVersionId'), _ayvaCommon.dbService.programVersion).eqJoin(x => x('right')('programId'), _ayvaCommon.dbService.program).coerceTo('array'));
  }
  return _instances;
}
async function getProgramInstances(userId, name = null) {
  let instances = (await loadInstances(userId)).map(i => ({
    programInstance: i.left.left,
    programVersion: i.left.right,
    program: i.right
  }));

  // Optionally find the programs with the provided id/name
  if (typeof name === 'string') {
    instances = instances.filter(i => i.programInstance.id.startsWith(name) || i.programInstance.alias.startsWith(name) || i.programVersion.id.startsWith(name) || i.program.id.startsWith(name) || i.program.name.startsWith(name));
  }
  return instances;
}
async function normalizeRef(userId, refObj) {
  const matches = await getProgramInstances(userId, refObj.program);
  if (matches.length === 0) {
    throw new Error('Program instance not found: ' + refObj.program);
  } else if (matches.length > 1) {
    throw new Error('Ambiguous program instance: ' + refObj.program);
  }
  const result = refObj.cloneWithProgram(matches[0].programInstance.id);
  for (let e of result.path) {
    const keys = Object.keys(e.args);
    for (let key of keys) {
      const arg = e.args[key];
      e.args[key] = arg instanceof _ayvaCommon.Ref ? await normalizeRef(userId, arg) : arg;
    }
  }
  return result;
}

// function measureBegin(tag) { console.time(`[ ${tag} ]`); }
// function measureEnd(tag) { console.timeEnd(`[ ${tag} ]`); }